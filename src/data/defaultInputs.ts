import type { InputValues } from '../types';

export const defaultInputs: InputValues = {
  formatCurrency: { amount: 1234.56, currency: 'USD' },
  convertCurrency: { amount: 100, fromCurrency: 'USD', toCurrency: 'EUR', rate: 0.85 },
  calculateTip: { amount: 100, percentage: 15 },
  calculateTax: { amount: 100, taxRate: 8.5 },
  calculateDiscount: { amount: 100, discountRate: 10 },
  calculateSimpleInterest: { principal: 1000, rate: 5, time: 2 },
  calculateROI: { initialInvestment: 10000, finalValue: 12000 },
  calculateSubscriptionValue: { monthlyAmount: 29.99, months: 12 },
  calculateProrationAmount: { amount: 100, daysUsed: 15, totalDays: 30 },
  formatPercentage: { decimal: 0.1525 },
  splitAmount: { totalAmount: 100, numberOfParts: 3 },
  calculatePercentageOfTotal: { amount: 25, total: 100 },
  formatMoney: { amount: 1234.56, currency: 'USD', locale: 'en-US' },
  formatCents: { cents: 12345, currency: 'USD' },
  formatCompactCurrency: { amount: 1500000, currency: 'USD' },
  isValidAmount: { amount: 100.5 },
  isValidCurrency: { currencyCode: 'USD' },
  parseAmount: { amountString: '123.45' },
  isPositiveAmount: { amount: 100 },
  isWithinRange: { amount: 50, min: 10, max: 100 },
  parseCurrencyString: { currencyString: '$123.45' },
  normalizeAmount: { amount: 123.456789, decimalPlaces: 2 },
  parseFormattedCurrency: { formattedString: '$1,234.56', locale: 'en-US' },
  // Additional functions
  convertWithFee: {
    amount: 100,
    fromCurrency: 'USD',
    toCurrency: 'EUR',
    rate: 0.85,
    feePercentage: 2.5,
  },
  bulkConvert: { amounts: [100, 200, 300], fromCurrency: 'USD', toCurrency: 'EUR', rate: 0.85 },
  roundMoney: { amount: 123.456, decimalPlaces: 2 },
  addMoney: { amount1: 100.5, amount2: 25.25 },
  subtractMoney: { amount1: 100.5, amount2: 25.25 },
  multiplyMoney: { amount: 100.5, multiplier: 1.5 },
  divideMoney: { amount: 100.5, divisor: 2 },
  calculateCompoundInterest: { principal: 1000, rate: 5, time: 2, compoundsPerYear: 4 },
  distributeProportionally: { totalAmount: 1000, weights: [1, 2, 3] },
  formatCurrencyByLocale: { amount: 1234.56, currency: 'USD', locale: 'en-US' },
  getLocaleCurrencyInfo: { locale: 'en-US' },
  formatWithGrouping: { amount: 1234567.89, locale: 'en-US' },
  formatDecimalPlaces: { amount: 123.456789, decimalPlaces: 2 },
  calculateMonthlyPayment: { principal: 200000, annualRate: 4.5, termYears: 30 },
  calculateLoanBalance: {
    principal: 200000,
    monthlyPayment: 1013.37,
    annualRate: 4.5,
    monthsPaid: 12,
  },
  calculateTotalInterest: { principal: 200000, monthlyPayment: 1013.37, termYears: 30 },
  generateAmortizationSchedule: { principal: 100000, annualRate: 4.5, termYears: 30 },
  calculateCreditUtilization: { balances: [1000, 2000], limits: [5000, 10000] },
  calculateMinimumPayment: { balance: 5000, annualRate: 18.99, minPercentage: 2 },
  calculatePayoffTime: { balance: 5000, monthlyPayment: 200, annualRate: 18.99 },
  calculateAnnualizedReturn: { initialValue: 10000, finalValue: 12000, years: 2 },
  calculateDividendYield: { annualDividends: 240, stockPrice: 80 },
  calculateFutureValue: { presentValue: 10000, annualRate: 7, years: 10 },
  compareSubscriptionPlans: {
    plans: [
      { name: 'Basic', monthlyPrice: 10 },
      { name: 'Pro', monthlyPrice: 25 },
    ],
  },
  calculateUpgradeCredit: {
    currentPlan: { name: 'Basic', monthlyPrice: 10 },
    newPlan: { name: 'Pro', monthlyPrice: 25 },
    daysRemaining: 15,
  },
  calculateAnnualEquivalent: { monthlyAmount: 29.99 },
  calculateNextPaymentDate: { lastPayment: '2023-01-01', billingCycle: 'monthly' },
  calculateTotalRecurringCost: { monthlyAmount: 29.99, years: 2 },
  roundToNearestCent: { amount: 123.456 },
  roundToBankersRounding: { amount: 123.455 },
  truncateToDecimalPlaces: { amount: 123.456789, decimalPlaces: 2 },
  ceilToNearestCent: { amount: 123.451 },
  formatThousands: { amount: 1234567.89 },
  formatToHundreds: { amount: 123456.789 },
  removeFormattingFromNumber: { formattedNumber: '1,234.56' },
  convertToWords: { amount: 1234.56 },
  formatAccountNumber: { accountNumber: '1234567890123456' },
};
